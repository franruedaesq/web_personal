{"version":3,"sources":["Context/ProyectContext.js","Components/CardUserInfo/CardUserInfo.js","Components/NavBar/NavBar.js","Components/BtnLink/BtnLink.js","Components/Project/Project.js","Components/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["ProyectContext","React","createContext","ProjectProvider","Provider","CardUserInfo","data","useContext","className","src","userInfo","avatar_url","alt","bio","NavBar","name","BtnLink","text","Project","description","url","href","target","Projects","repos","map","item","key","id","html_url","App","useState","gitHubData","setGitHubData","userReps","setUserReps","useEffect","fetchData","setter","a","fetch","json","jsonData","contextData","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAEMA,G,YAAiBC,IAAMC,cAAc,KAE9BC,EAAkBH,EAAeI,SAE/BJ,ICFA,SAASK,IACpB,IAAMC,EAAOC,qBAAWP,GACxB,OACI,yBAAKQ,UAAU,gBACX,yBAAKA,UAAU,uBAAuBC,IAAKH,EAAKI,SAASC,WAAYC,IAAI,KACzE,2BAAIN,EAAKI,SAASG,M,MCLf,SAASC,IACpB,IAAMR,EAAOC,qBAAWP,GACxB,OACI,yBAAKQ,UAAU,UACX,wBAAIA,UAAU,iBAAkBF,EAAKI,SAASK,O,MCL3C,SAASC,EAAT,GAA0B,IAARC,EAAO,EAAPA,KAC7B,OACI,4BAAQT,UAAU,WACbS,G,MCFE,SAASC,EAAT,GAA4C,IAA1BH,EAAyB,EAAzBA,KAAMI,EAAmB,EAAnBA,YAAaC,EAAM,EAANA,IAChD,OACI,yBAAKZ,UAAU,WACX,uBAAGA,UAAU,kBAAkBO,GAC/B,uBAAGP,UAAU,wBAAwBW,GACrC,yBAAKX,UAAU,oBACf,uBAAGa,KAAMD,EAAKE,OAAO,UAAS,kBAAC,EAAD,CAASL,KAAK,gBAC5C,uBAAGI,KAAI,yCAAoCN,GAAQO,OAAO,UAAS,kBAAC,EAAD,CAASL,KAAK,gB,MCN9E,SAASM,IAEpB,IAAMjB,EAAOC,qBAAWP,GAExB,OACI,yBAAKQ,UAAU,qBACX,wBAAIA,UAAU,4BAAd,YAEA,yBAAKA,UAAU,gCACVF,EAAKkB,MAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAASX,KAAMW,EAAKX,KAAMI,YAAaO,EAAKP,YAAaQ,IAAKD,EAAKE,GAAIR,IAAKM,EAAKG,gBC8B1GC,MApCf,WAAgB,IAAD,EAEuBC,mBAAS,IAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,KAMbC,qBAAU,WAERC,EAAU,4CAA6CJ,GACvDI,EAAU,kDAAmDF,KAC5D,IAGH,IAAME,EAAS,uCAAG,WAAMjB,EAAKkB,GAAX,iBAAAC,EAAA,sEACGC,MAAMpB,GADT,cACVd,EADU,gBAEOA,EAAKmC,OAFZ,OAEVC,EAFU,OAGhBJ,EAAOI,GAHS,2CAAH,wDAOTC,EAAc,CAClBjC,SAAUsB,EACVR,MAAOU,GAGT,OACE,kBAAC/B,EAAD,CAAiByC,MAAOD,GACtB,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SC1BYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69ad9c82.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ProyectContext = React.createContext({});\r\n\r\nexport const ProjectProvider = ProyectContext.Provider;\r\n\r\nexport default ProyectContext;","import React, {useContext} from 'react'\r\nimport './CardUserInfo.scss'\r\nimport ProyectContext from '../../Context/ProyectContext'\r\n\r\nexport default function CardUserInfo() {\r\n    const data = useContext(ProyectContext);\r\n    return (\r\n        <div className=\"cardUserInfo\">\r\n            <img className=\"cardUserInfo__avatar\" src={data.userInfo.avatar_url} alt=\"\"/>\r\n            <p>{data.userInfo.bio}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport './NavBar.scss'\r\nimport ProyectContext from '../../Context/ProyectContext'\r\n\r\nexport default function NavBar() {\r\n    const data = useContext(ProyectContext);\r\n    return (\r\n        <div className=\"navBar\" >\r\n            <h2 className=\"navBar__title\" >{data.userInfo.name}</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './BtnLink.scss'\r\n\r\nexport default function BtnLink({text}) {\r\n    return (\r\n        <button className=\"btnLink\">\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport BtnLink from '../BtnLink/BtnLink'\r\nimport './Project.scss'\r\n\r\nexport default function Project({name, description, url}) {\r\n    return (\r\n        <div className=\"project\">\r\n            <p className=\"project__title\">{name}</p>\r\n            <p className=\"project__description\">{description}</p>\r\n            <div className=\"project__buttons\">\r\n            <a href={url} target=\"_blank\"><BtnLink text=\"Ir al repo\"/></a>\r\n            <a href={`https://franruedaesq.github.io/${name}`} target=\"_blank\"><BtnLink text=\"Ir a web\"/></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport Project from '../Project/Project'\r\nimport ProyectContext from '../../Context/ProyectContext'\r\nimport './Projects.scss'\r\n\r\nexport default function Projects() {\r\n    \r\n    const data = useContext(ProyectContext);\r\n\r\n    return (\r\n        <div className=\"projectsContainer\">\r\n            <h2 className=\"projectsContainer__title\">Projects</h2>\r\n\r\n            <div className=\"projectsContainer__container\">\r\n                {data.repos.map(item => <Project name={item.name} description={item.description} key={item.id} url={item.html_url} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CardUserInfo from './Components/CardUserInfo/CardUserInfo';\nimport NavBar from './Components/NavBar/NavBar';\nimport Projects from './Components/Projects/Projects';\nimport {ProjectProvider} from './Context/ProyectContext'\n\n\nfunction App() {\n\n  const [gitHubData, setGitHubData] = useState({})\n  const [userReps, setUserReps] = useState([])\n\n\n  useEffect(() => {\n    // fetchGitHubData()\n    fetchData('https://api.github.com/users/franruedaesq', setGitHubData)\n    fetchData('https://api.github.com/users/franruedaesq/repos', setUserReps)\n  }, [])\n\n\n  const fetchData = async(url, setter) => {\n    const data = await fetch(url);\n    const jsonData = await data.json()\n    setter(jsonData)\n  }\n\n\n  const contextData = {\n    userInfo: gitHubData,\n    repos: userReps\n  }\n\n  return (\n    <ProjectProvider value={contextData}>\n      <div className=\"App\">\n        <NavBar/>\n        <CardUserInfo/>\n        <Projects/>\n      </div>\n    </ProjectProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}